/*This is a lexer I made for DJ - file name dj.l*/

%option yylineno
%option noyywrap

%{
  #define DEBUG 1
  typedef int Token;
  Token scanned(Token t);
%}

digit	[0-9]*
wspace	[ \t\r\n]+
id	[a-zA-Z][a-zA-Z0-9]*

%%
main	{return scanned(MAIN);}
class	{return scanned(CLASS);}
extends	{return scanned(EXTENDS);}
new	    {return scanned(NEW);}
null	{return scanned(NUL);}
this	{return scanned(THIS);}
"=" 	{return scanned(ASSIGN);}
nat 	{return scanned(NATTYPE);}
printNat	{return scanned(PRINTNAT);}
readNat	{return scanned(READNAT);}
{id}	{return scanned(ID);}
{digit} {return scanned(NATLITERAL);}
"!"	{return scanned(NOT);}
"&&"	{return scanned(AND);}
"<"	{return scanned(LESS);}
"=="	{return scanned(EQUALITY);}
"+"	{return scanned(PLUS);}
"-"	{return scanned(MINUS);}
"*"	{return scanned(TIMES);}
"{"	{return scanned(LBRACE);}
"}"	{return scanned(RBRACE);}
"("	{return scanned(LPAREN);}
")"	{return scanned(RPAREN);}
"."	{return scanned(DOT);}
";"	{return scanned(SEMICOLON);}
","	{return scanned(COMMA);}
"//"        { char c = input();
             while(c!='\n' && c!=EOF) c=input();
	    }

{wspace}   { /*skip whitespace*/ }
<<EOF>>    {return scanned(ENDOFFILE);}
.          { if(DEBUG) printf("\n");
             printf("Lex error on line %d: Illegal character %s\n",
                    yylineno,yytext);
             exit(-1);
           }
%%

/* process and return scanned token t */
Token scanned(Token t) {
  if(DEBUG==0) return t;
  switch(t) {
    case MAIN: printf("MAIN "); return t;
    case CLASS: printf("CLASS "); return t;
    case EXTENDS: printf("EXTENDS "); return t;
    case NEW: printf("NEW "); return t;
    case NUL: printf("NUL "); return t;
    case THIS: printf("THIS "); return t;
    case ASSIGN: printf("ASSIGN "); return t;

    case IF: printf("IF "); return t;
    case WHILE: printf("WHILE "); return t;
    case NATLITERAL: printf("NATLITERAL(%s) ", yytext); return t;

    case NATTYPE: printf("NATTYPE "); return t;
    case PRINTNAT: printf("PRINTNAT "); return t;
    case READNAT: printf("READNAT "); return t;
    case EQUALITY: printf("EQUAILTY "); return t;
    case LESS: printf("LESS "); return t;
    case AND: printf("AND "); return t;
    case NOT: printf("NOT "); return t;
    case PLUS: printf("PLUS "); return t;
    case MINUS: printf("MINUS "); return t;
    case TIMES: printf("TIMES "); return t;
    case ELSE: printf("ELSE "); return t;
    case ID: printf("ID(%s) ", yytext); return t;
    case LPAREN: printf("LPAREN "); return t;
    case RPAREN: printf("RPAREN "); return t;
    case DOT: printf("DOT "); return t;   
    case SEMICOLON: printf("SEMICOLON "); return t;
    case COMMA: printf("COMMA "); return t;
    case LBRACE: printf("LBRACE "); return t;
    case RBRACE: printf("RBRACE "); return t;
    case ENDOFFILE: printf("ENDOFFILE\n "); return t;
    default: printf("ERROR: invalid token in scanned().\n"); exit(-1);
  }
}
